input FindOrCreateOneThreadInput {
    application_id: String!
    title: String!
    website_url: String!
}

input FetchThreadCommentsById {
    skip: Int!
    limit: Int!
}

fragment ThreadFragment on ThreadModel {
    id
    application_id
    title
    website_url
    poll {
        ...PollFragment
    }
    pinned_comment {
        application_id
        author {
            username
            id
        }
        plain_text_body
        json_body
        id
        thread_id
        created_at
        updated_at
        user_id
        parent_id
    }
}

fragment PollFragment on PollEntity {
    id
    title
    created_at
    updated_at
    closed
    voted
    options {
        id
        option
        votes {
            id
            user_id
        }
    }
}

query FindOneOrCreateOneThread(
    $findOrCreateOneThreadInput: FindOrCreateOneThreadInput!
) {
    find_one_thread_or_create_one(
        findOrCreateOneThreadInput: $findOrCreateOneThreadInput
    ) {
        ...ThreadFragment
    }
}

input FindThreadByIdInput {
    thread_id: String!
}

query FindThreadById($findThreadById: FindThreadByIdInput!) {
    find_thread_by_id(findThreadById: $findThreadById) {
        ...ThreadFragment
    }
}

query FindOneApplicationById($id: String!) {
    find_one_application_by_id(id: $id) {
        id
        application_name
        short_name
        application_owner {
            username
        }
        moderators {
            username
            id
        }
    }
}

fragment CommentFragment on CommentModel {
    application_id
    author {
        username
        id
    }
    plain_text_body
    json_body
    id
    thread_id
    created_at
    updated_at
    user_id
    parent_id
    pending
    _count {
        down_vote
        replies
        up_vote
    }
    replied_to_user {
        username
    }
}

enum SORT {
    ASC
    DESC
    TOP_VOTES
}

input FetchCommentByThreadIdInput {
    limit: Int!
    skip: Int!
    thread_id: String!
    sort: SORT!
    application_short_name: String!
}

query FetchCommentByThreadId(
    $fetchCommentByThreadIdInput: FetchCommentByThreadIdInput!
) {
    fetch_comments_by_thread_id(
        fetchCommentByThreadIdInput: $fetchCommentByThreadIdInput
    ) {
        comments_count
        comments {
            ...CommentFragment
            replies {
                ...CommentFragment
                parent_id
                replies {
                    ...CommentFragment
                }
            }
        }
    }
}

input CreateCommentInput {
    plain_text_body: String!
    json_body: Object!
    application_id: String!
    thread_id: String!
}

mutation CreateThreadComent($createCommentInput: CreateCommentInput!) {
    create_comment(CreateCommentInput: $createCommentInput) {
        ...CommentFragment
        replies {
            ...CommentFragment
            replies {
                ...CommentFragment
            }
        }
    }
}

mutation DeleteThreadComment($commentId: String!) {
    delete_comment(commentId: $commentId) {
        success
        message
    }
}

query CurrentUser {
    current_user {
        id
        username
    }
}

input CreateReplyCommentInput {
    plain_text_body: String!
    json_body: Object!
    application_id: String!
    thread_id: String!
    parent_id: String!
    replied_to_id: String!
}

mutation CreateReplyComment(
    $CreateReplyCommentInput: CreateReplyCommentInput!
) {
    create_reply_comment(CreateReplyCommentInput: $CreateReplyCommentInput) {
        ...CommentFragment
        replies {
            ...CommentFragment
            replies {
                ...CommentFragment
            }
        }
    }
}

input UpdateCommentInput {
    plain_text_body: String!
    json_body: Object!
    comment_id: String!
}

mutation EditThreadComment($UpdateCommentInput: UpdateCommentInput!) {
    update_comment(UpdateCommentInput: $UpdateCommentInput) {
        ...CommentFragment
        replies {
            ...CommentFragment
            replies {
                ...CommentFragment
            }
        }
    }
}

mutation UpVoteComment($comment_id: String!) {
    up_vote_comment(comment_id: $comment_id) {
        ...CommentFragment
        replies {
            ...CommentFragment
            replies {
                ...CommentFragment
            }
        }
    }
}

mutation DownVoteComment($comment_id: String!) {
    down_vote_comment(comment_id: $comment_id) {
        ...CommentFragment
        replies {
            ...CommentFragment
            replies {
                ...CommentFragment
            }
        }
    }
}

mutation BlockUser($user_id: String!) {
    block_user(user_id: $user_id) {
        success
        message
    }
}

mutation UnBlockUser($user_id: String!) {
    unblock_user(user_id: $user_id) {
        success
        message
    }
}

enum REPORT_REASON {
    DISAGREE
    SPAM
    INAPPROPRIATE_PROFILE
    THREATENING_CONTENT
    PRIVATE_INFORMATION
}

input CreateReportInput {
    comment_id: String!
    report: REPORT_REASON!
}

mutation CreateReport($createReportInput: CreateReportInput!) {
    create_report(createReportInput: $createReportInput) {
        success
        message
    }
}

input AddPinnedCommentInput {
    thread_id: String!
    comment_id: String!
}

mutation AddPinnedComment($addPinnedCommentInput: AddPinnedCommentInput!) {
    add_pinned_comment(addPinnedCommentInput: $addPinnedCommentInput) {
        ...ThreadFragment
    }
}

input OptionInput {
    id: String!
    option: String!
}

input CreatePollInput {
    thread_id: String!
    title: String!
    options: [OptionInput!]!
}

mutation CreatePollMutation($createPollInput: CreatePollInput!) {
    create_poll(createPollInput: $createPollInput) {
        ...PollFragment
    }
}

input UpdatePollVoteInput {
    poll_id: String!
    options_id: String!
}

mutation UpdatePollVote($updatePollVoteInput: UpdatePollVoteInput!) {
    update_poll_vote(updatePollVoteInput: $updatePollVoteInput) {
        ...PollFragment
    }
}

input DeletePollInput {
    thread_id: String!
    poll_id: String!
}

mutation DeletePoll($deletePollInput: DeletePollInput!) {
    delete_poll(deletePollInput: $deletePollInput) {
        success
        message
    }
}

input ClosePollInput {
    poll_id: String!
}

mutation ClosePoll($closePollInput: ClosePollInput!) {
    close_poll(closePollInput: $closePollInput) {
        ...PollFragment
    }
}
