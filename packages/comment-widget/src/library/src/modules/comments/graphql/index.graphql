input FindOrCreateOneThreadInput {
    application_id: String!
    title: String!
    website_url: String!
}

input FetchThreadCommentsById {
    skip: Int!
    limit: Int!
}

query FindOneOrCreateOneThread(
    $findOrCreateOneThreadInput: FindOrCreateOneThreadInput!
) {
    find_one_thread_or_create_one(
        findOrCreateOneThreadInput: $findOrCreateOneThreadInput
    ) {
        id
        application_id
        title
        website_url
    }
}

fragment CommentFragment on CommentModel {
    application_id
    author {
        username
        email
        id
    }
    body
    id
    thread_id
    created_at
    updated_at
    user_id
    parent_id
    replied_to_user {
        username
    }
    ratings {
        id
    }
}

input FetchCommentByThreadIdInput {
    limit: Int!
    skip: Int!
    thread_id: String!
}

query FetchCommentByThreadId(
    $fetchCommentByThreadIdInput: FetchCommentByThreadIdInput!
) {
    fetch_comments_by_thread_id(
        fetchCommentByThreadIdInput: $fetchCommentByThreadIdInput
    ) {
        comments_count
        comments {
            ...CommentFragment
            replies {
                ...CommentFragment
                parent_id
                replies {
                    ...CommentFragment
                }
            }
        }
    }
}

input CreateCommentInput {
    body: String!
    application_id: String!
    thread_id: String!
}

mutation CreateThreadComent($createCommentInput: CreateCommentInput!) {
    create_comment(CreateCommentInput: $createCommentInput) {
        ...CommentFragment
        replies {
            ...CommentFragment
            replies {
                ...CommentFragment
            }
        }
    }
}

mutation DeleteThreadComment($commentId: String!) {
    delete_comment(commentId: $commentId) {
        success
        message
    }
}

query CurrentUser {
    current_user {
        id
        email
    }
}

input CreateReplyCommentInput {
    body: String!
    application_id: String!
    thread_id: String!
    parent_id: String!
    replied_to_id: String!
}

mutation CreateReplyComment(
    $CreateReplyCommentInput: CreateReplyCommentInput!
) {
    create_reply_comment(CreateReplyCommentInput: $CreateReplyCommentInput) {
        ...CommentFragment
        replies {
            ...CommentFragment
            replies {
                ...CommentFragment
            }
        }
    }
}

input UpdateCommentInput {
    body: String!
    comment_id: String!
}

mutation EditThreadComment($UpdateCommentInput: UpdateCommentInput!) {
    update_comment(UpdateCommentInput: $UpdateCommentInput) {
        ...CommentFragment
        replies {
            ...CommentFragment
            replies {
                ...CommentFragment
            }
        }
    }
}
